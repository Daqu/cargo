使用elixir来开发一个分布式存储系统
==================================

erlang作为一门老语言，在分布式架构越来越流行的今天，它正在重焕光彩。在分布式系统中各节点如何通信以及共享状态其实是一个问题，比如openstack
swift的各存储节点之间为了保证存储状态的一致，除了通过一致性算法制定策略外，还需要强有力的通信机制来保证通信质量。erlang在这方面有架构上的优势，而它的OTP则为编写高性能、高容错的分布式应用提供一个框架。elixir是基于erlang
vm的语言，它封装了许多erlang的操作，它可以与erlang无缝配合，它可以说是更好的erlang。leofs、亚马逊的riak都是用erlang构建的存储系统。下面，笔者将简单介绍如何使用elixir开发一个分布式存储系统，这是对elixir
的一个教学例子的总结。

OTP是什么
---------

OTP是一套应用框架，它阐述了如何在erlang
虚拟机上开发一个完整的应用。OTP是Open Telecom Platform的缩写。

    OTP的中心思想就是把程序的通用部分和业务部分切开，我帮你把通用部分做好，你做你的业务逻辑就行了。如果你看过一些分布式系统，最火的应该是分布式存储系统了，像Amazon的Dynamo、Google的Bigtable、LiveJournal的memcache等，就知道保证分布式系统的容错能力、数据一致性、请求高并发性是非常困难的。但是他们所用的算法都非常固定，当你去实现另一个分布式系统时，很可能就是参考他们的算法。然后一些技术功底不够的程序员就想，要是能把这些基础的设施都做好，并且提供插件扩展，那多好啊，这样当我想写个分布式数据库的时候就能跟写普通数据库一样简单了。没错，OTP就是帮你干那些又脏又累的活。

在Elixir中使用otp
-----------------

elixir中要使用otp主要用到以下几种抽象

-  state
-  agent
-  gen\_server
-  supervisor

由于erlang是纯函数式编程语言，因此变量都是一次赋值后便不可变的。但在业务场景中，经常要修改结果。因此erlang提供了抽象state，它可以保存一些结果并允许被修改。

agent相当于是对state的进一步封装，并且agent提供了一系列操作state的函数。

gen\_server顾名思义，它其实是一个服务器。它可以处理各种agent的请求。不仅如此，gen\_server还可以起到客户端的作用。它可以对agent进一步封装。经常出现的情况就是封装了agent的genserver(客户端)与genserver(服务器)交互。

supervisor用于监督进程。在OTP中，有这样一种哲学，"忽略错误，重启就好"。如果一个erlang
进程crash了，那么就让它崩溃就行了，然后再重启就OK。supervisor就是起到监督进程状态，如果进程崩溃，就做出相应的处理。

在elixir中使用otp开发分布式存储
-------------------------------

既然otp把基础设施都搭好了，那么使用otp开发一个应用的思路是啥。

1. 编写各功能模块
2. 通过Agent来保存state，state就是各种结果
3. 通过Genserver来实现通信
4. 通过supervisor来保证程序正常运行

由于OTP是一套框架，因此对于分布式和非分布式应用。开发的思路是一样的，也就是说上述的思路不仅可以开发非分布式应用，还可以开发分布式应用。并且架构不用发生太多改变。

otp的特点
---------

使用otp来开发程序和一般的程序开发流程有较大不同，主要体现在结果的处理和错误的处理。

结果的处理
~~~~~~~~~~

otp，或者说erlang更准确一点。其实是没有变量这个概念的，因为变量都是赋值之后不可变的，换句话说就是常量了。对于函数的返回结果，erlang的描述是message，也就是消息。在笔者看来，erlang把每一个erlang
进程都看成是一个邮递员，函数的调用则意味着告诉邮递员，也就是调用这个函数的进程应该如何和别的邮递员通信。每一个邮递员都有一个mailbox(邮箱)，邮箱中会储存其它邮递员发给这个邮递员的消息，但mailbox的中的信息不是长久的，收到下一封信的时候信箱中的消息就被扔掉了。所以需要state这样的机制来保存结果。

在otp中，一个应用的运行事实上是多个erlang
进程相互通信的过程，直白一点就是一群邮递员相互传递信件的过程。这简直就是天然的分布式架构。

错误的处理
~~~~~~~~~~

otp中对待错误的观点是不管它，我只要能保证崩溃后还能重启就行了。因此它不会像其它的语言那样try
catch
final，而是用一个或多个进程去监督一个或多个进程，一旦它们崩溃，就按照设定的步骤重启它。

最后
----

如果感兴趣，可以看看\ `官方的例子 <https://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html>`__
